<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>

//  导入MultipleOutputHelper.ttinclude文件
<#@include file="$(ProjectDir)\MultipleOutputHelper.ttinclude"#>
<#@include file="$(ProjectDir)\CodeGeneratorHelper.ttinclude"#> 

<#		
		var manager = Manager.Create(Host, GenerationEnvironment);  
		var codeGeneratorHelper = CodeGeneratorHelper.Create();
		List<CodeGeneratorHelper.TableModel> tableList = CodeGeneratorHelper.GetTableList();
		foreach(var tableModel in tableList)
		{	
			manager.StartNewFile(tableModel.Name +"DAL.cs");
			List<CodeGeneratorHelper.FieldModel> fieldList = CodeGeneratorHelper.GetFieldList(tableModel.Name);
#>/*
 * -------------------------------------------------------------------------------
 * 版权信息：	韩天伟（hantianwei.cn）	版权所有	<#= DateTime.Now.ToString("yyyy") #>
 * 功能描述：	代码处成器生成
 * 
 * 创建人：　	代码生成
 * 创建日期：	<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #>
 * 创建说明：	
 * 
 * 修改人：　	
 * 修改日期：	
 * 修改说明：	
 *    
 * -------------------------------------------------------------------------------
 */
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using TianWei.Model;
using TianWei.Utility;
using TianWei.Enums;
using System.Data.Common;

namespace TianWei.DAL
{
    public partial class <#= tableModel.Name #>DAL
    {

        /// <summary>
        /// <#=tableModel.Description#>-增加方法
        /// </summary>
        public void Add(<#= tableModel.Name #> <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>)
        {
            using (<#=codeGeneratorHelper.DBContext#> context = new <#=codeGeneratorHelper.DBContext#>(WriteRead.Write))
            {
               context.<#= tableModel.Name #>.Add(<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>);
               context.SaveChanges();
            }
			LogHelper.AddOperate(<#= CodeGeneratorHelper.GetKeyAndValue(fieldList,tableModel.Name) #>, <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>);
        }
	
        /// <summary>
        /// <#=tableModel.Description#>-删除方法
        /// </summary>
        public void Remove(<#= CodeGeneratorHelper.GetKeyToCondition(fieldList) #>)
        {
			<#= tableModel.Name #> <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #> = new <#= tableModel.Name #>();
            using (<#=codeGeneratorHelper.DBContext#> context = new <#=codeGeneratorHelper.DBContext#>(WriteRead.Write))
            {
                 <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #> = context.<#= tableModel.Name #>.Find(<#= CodeGeneratorHelper.GetKeyToFindConditon(fieldList) #>);
                 context.<#= tableModel.Name #>.Remove(<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>);
                 context.SaveChanges();
            }
			LogHelper.DeleteOperate(<#= CodeGeneratorHelper.GetKeyAndValue(fieldList,tableModel.Name) #>, <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>);
        }

        /// <summary>
        /// <#=tableModel.Description#>-删除方法
        /// </summary>
        public void Remove(Expression<Func<<#= tableModel.Name #>, bool>> condition)
        {
			List<<#= tableModel.Name #>> <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s = null;
            using (<#=codeGeneratorHelper.DBContext#> context = new <#=codeGeneratorHelper.DBContext#>(WriteRead.Write))
            {
                 <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s = context.<#= tableModel.Name #>.Where(condition).ToList();
                    context.<#= tableModel.Name #>.RemoveRange(<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s);
                 context.SaveChanges();
            }

			if (<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s != null)
            {
                foreach (var <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #> in <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s)
                {
                    LogHelper.DeleteOperate(<#= CodeGeneratorHelper.GetKeyAndValue(fieldList,tableModel.Name) #>, <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>);
                }
            }
        }

        /// <summary>
        /// <#=tableModel.Description#>-修改方法
        /// </summary>
        public void Save(<#= tableModel.Name #> <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>)
        {
            using (<#=codeGeneratorHelper.DBContext#> context = new <#=codeGeneratorHelper.DBContext#>(WriteRead.Write))
            {
                 context.Entry(<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>).State = EntityState.Modified;
                 context.SaveChanges();
            }
			LogHelper.UpdateOperate(<#= CodeGeneratorHelper.GetKeyAndValue(fieldList,tableModel.Name) #>, null, <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>);
        }

        /// <summary>
        /// <#=tableModel.Description#>-根据主键获取实体信息
        /// </summary>
        /// <returns></returns>
        public <#= tableModel.Name #> GetById(<#= CodeGeneratorHelper.GetKeyToCondition(fieldList) #>, WriteRead writeRead = WriteRead.Read)
        {
            using (<#=codeGeneratorHelper.DBContext#> context = new <#=codeGeneratorHelper.DBContext#>(writeRead))
            {
                return context.<#= tableModel.Name #>.Find(<#= CodeGeneratorHelper.GetKeyToFindConditon(fieldList) #>);
            }
        }

		
        /// <summary>
        /// <#=tableModel.Description#>-根据查询条件获取实体信息
        /// <param name="condition">查询条件</param>
        /// </summary>
        /// <returns></returns>
        public <#= tableModel.Name #> GetItemByQuery(Expression<Func<<#= tableModel.Name #>, bool>> condition, WriteRead writeRead = WriteRead.Read)
        {
            using (<#=codeGeneratorHelper.DBContext#> context = new <#=codeGeneratorHelper.DBContext#>(writeRead))
            {
                return context.<#= tableModel.Name #>.SingleOrDefault(condition);
            }
        }

        /// <summary>
        /// <#=tableModel.Description#>-根据条件查询是否存在
        /// <param name="condition">查询条件</param>
        /// </summary>
        /// <returns></returns>
        public bool IsExists(Expression<Func<<#= tableModel.Name #>, bool>> condition, WriteRead writeRead = WriteRead.Read)
        {
            using (<#=codeGeneratorHelper.DBContext#> context = new <#=codeGeneratorHelper.DBContext#>(writeRead))
            {
                return context.<#= tableModel.Name #>.Any(condition);
            }
        }

		/// <summary>
        /// <#=tableModel.Description#>-根据查询条件获取总数
        /// <param name="condition">查询条件</param>
        /// </summary>
        /// <returns></returns>
        public int GetCountByQuery(Expression<Func<<#= tableModel.Name #>, bool>> condition, WriteRead writeRead = WriteRead.Read)
        {
		    using (<#=codeGeneratorHelper.DBContext#> context = new <#=codeGeneratorHelper.DBContext#>(writeRead))
            {
                return context.<#= tableModel.Name #>.Where(condition).Count();
            }
		}

        /// <summary>
        /// <#=tableModel.Description#>-获取所有
        /// </summary>
        /// <returns></returns>
        public List<<#= tableModel.Name #>> GetAll(WriteRead writeRead = WriteRead.Read)
        {
            List<<#= tableModel.Name #>> <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s = new List<<#= tableModel.Name #>>();
            using (<#=codeGeneratorHelper.DBContext#> context = new <#=codeGeneratorHelper.DBContext#>(writeRead))
            {
                <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s = context.<#= tableModel.Name #>.ToList();
            }
            return <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s;
        }

		/// <summary>
        /// <#=tableModel.Description#>-分页查询
        /// </summary>
        /// <param name="startRowIndex">索引开始</param>
        /// <param name="maximumRows">每页信息条数</param>
        /// <param name="condition">查询条件</param>
        /// <param name="totalRecords">总计录数</param>
		/// <param name="orderBy">排序条件</param>
        /// <param name="isDesc">是否倒序</param>
        /// <returns></returns>
		public List<<#= tableModel.Name #>> GetPagedList(int startRowIndex, int maximumRows, Expression<Func<<#= tableModel.Name #>,bool>> condition, Expression<Func<<#= tableModel.Name #>, object>> orderBy, bool isDesc, out int totalRecords, WriteRead writeRead = WriteRead.Read)
        {
            List<<#= tableModel.Name #>> <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s = new List<<#= tableModel.Name #>>();
            using (<#=codeGeneratorHelper.DBContext#> context = new <#=codeGeneratorHelper.DBContext#>(writeRead))
            {
				var _<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s = context.<#= tableModel.Name #>.Where<<#= tableModel.Name #>>(condition);
                if (orderBy != null)
                {
                    _<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s = _<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s.OrderBy(EFHelper.GetPropertyName<<#= tableModel.Name #>>(orderBy), isDesc);
                }
				else
                {
                    _<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s = _<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s.OrderBy(o => o.<#= CodeGeneratorHelper.GetFirstKeyName(fieldList) #>);
                }
                <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s = _<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s.Skip(startRowIndex).Take(maximumRows).ToList();
                totalRecords = context.<#= tableModel.Name #>.Where<<#= tableModel.Name #>>(condition).Count();
            }
            return <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s;
        }

		/// <summary>
        /// <#=tableModel.Description#>-根据条件查询
        /// </summary>
        /// <param name="condition">条件</param>
        /// <param name="orderBy">排序条件</param>
        /// <param name="isDesc">是否倒序</param>
        /// <returns></returns>
        public List<<#= tableModel.Name #>> GetListByQuery(Expression<Func<<#= tableModel.Name #>, bool>> condition, Expression<Func<<#= tableModel.Name #>, object>> orderBy, bool isDesc, WriteRead writeRead = WriteRead.Read)
        {
            List<<#= tableModel.Name #>> <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s = new List<<#= tableModel.Name #>>();
            using (<#=codeGeneratorHelper.DBContext#> context = new <#=codeGeneratorHelper.DBContext#>(writeRead))
            {
                var _<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s = context.<#= tableModel.Name #>.Where<<#= tableModel.Name #>>(condition);
                if (orderBy != null)
                {
                    _<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s = _<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s.OrderBy(EFHelper.GetPropertyName<<#= tableModel.Name #>>(orderBy), isDesc);
                }
                <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s = _<#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s.ToList();
            }
            return <#= CodeGeneratorHelper.TableNameToLower(tableModel.Name) #>s;
        }
    }
}

	
<#
	manager.EndBlock();    
}
    manager.Process(true);  
#> 
