<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGenerator.Utility" #>
/*
 * -------------------------------------------------------------------------------
 * 版权信息：	奥鹏教育（open.com.cn）	版权所有	<#= DateTime.Now.ToString("yyyy") #>
 * 功能描述：	代码处成器生成
 * 
 * 创建人：　	代码生成
 * 创建日期：	<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #>
 * 创建说明：	
 * 
 * 修改人：　	
 * 修改日期：	
 * 修改说明：	
 *    
 * -------------------------------------------------------------------------------
 */

using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using <#= Config.BusinessEntitiesClass #>;
using <#= Config.NameSpace #>.Enums;
using <#= Config.NameSpace #>.Utility;
using <#= Config.IDataAccessClass #>;
using <#= Config.NameSpace #>.Logging;
using System.Data.Common;

namespace <#= Config.DataAccessClass #>
{
    public partial class <#= tableName #><#= Config.DataAccessSuffix #><#= Utility.Config.IDataAccessEnable?" : I"+tableName+Config.DataAccessSuffix:"" #>
    {

        /// <summary>
        /// <#=description#>-增加方法
        /// </summary>
        public void Add(<#= tableName #> <#= StringHelper.TableNameToLower(tableName) #>)
        {
            using (<#=Utility.Config.DBContext#> context = new <#=Utility.Config.DBContext#>(WriteRead.Write))
            {
               context.<#= tableName #>.Add(<#= StringHelper.TableNameToLower(tableName) #>);
               context.SaveChanges();
            }
			LogHelper.AddOperate(<#= StringHelper.GetKeyAndValue(fieldList,tableName) #>, <#= StringHelper.TableNameToLower(tableName) #>);
        }
	
        /// <summary>
        /// <#=description#>-删除方法
        /// </summary>
        public void Remove(<#= StringHelper.GetKeyToCondition(fieldList) #>)
        {
			<#= tableName #> <#= StringHelper.TableNameToLower(tableName) #> = new <#= tableName #>();
            using (<#=Utility.Config.DBContext#> context = new <#=Utility.Config.DBContext#>(WriteRead.Write))
            {
                 <#= StringHelper.TableNameToLower(tableName) #> = context.<#= tableName #>.Find(<#= StringHelper.GetKeyToFindConditon(fieldList) #>);
                 context.<#= tableName #>.Remove(<#= StringHelper.TableNameToLower(tableName) #>);
                 context.SaveChanges();
            }
			LogHelper.DeleteOperate(<#= StringHelper.GetKeyAndValue(fieldList,tableName) #>, <#= StringHelper.TableNameToLower(tableName) #>);
        }

        /// <summary>
        /// <#=description#>-删除方法
        /// </summary>
        public void Remove(Expression<Func<<#= tableName #>, bool>> condition)
        {
			List<<#= tableName #>> <#= StringHelper.TableNameToLower(tableName) #>s = null;
            using (<#=Utility.Config.DBContext#> context = new <#=Utility.Config.DBContext#>(WriteRead.Write))
            {
                 <#= StringHelper.TableNameToLower(tableName) #>s = context.<#= tableName #>.Where(condition).ToList();
                    context.<#= tableName #>.RemoveRange(<#= StringHelper.TableNameToLower(tableName) #>s);
                 context.SaveChanges();
            }

			if (<#= StringHelper.TableNameToLower(tableName) #>s != null)
            {
                foreach (var <#= StringHelper.TableNameToLower(tableName) #> in <#= StringHelper.TableNameToLower(tableName) #>s)
                {
                    LogHelper.DeleteOperate(<#= StringHelper.GetKeyAndValue(fieldList,tableName) #>, <#= StringHelper.TableNameToLower(tableName) #>);
                }
            }
        }

        /// <summary>
        /// <#=description#>-修改方法
        /// </summary>
        public void Save(<#= tableName #> <#= StringHelper.TableNameToLower(tableName) #>)
        {
            using (<#=Utility.Config.DBContext#> context = new <#=Utility.Config.DBContext#>(WriteRead.Write))
            {
                 context.Entry(<#= StringHelper.TableNameToLower(tableName) #>).State = EntityState.Modified;
                 context.SaveChanges();
            }
			LogHelper.UpdateOperate(<#= StringHelper.GetKeyAndValue(fieldList,tableName) #>, null, <#= StringHelper.TableNameToLower(tableName) #>);
        }

        /// <summary>
        /// <#=description#>-根据主键获取实体信息
        /// </summary>
        /// <returns></returns>
        public <#= tableName #> GetById(<#= StringHelper.GetKeyToCondition(fieldList) #>)
        {
            using (<#=Utility.Config.DBContext#> context = new <#=Utility.Config.DBContext#>(WriteRead.Read))
            {
                return context.<#= tableName #>.Find(<#= StringHelper.GetKeyToFindConditon(fieldList) #>);
            }
        }

		
        /// <summary>
        /// <#=description#>-根据查询条件获取实体信息
        /// <param name="condition">查询条件</param>
        /// </summary>
        /// <returns></returns>
        public <#= tableName #> GetItemByQuery(Expression<Func<<#= tableName #>, bool>> condition)
        {
            using (<#=Utility.Config.DBContext#> context = new <#=Utility.Config.DBContext#>(WriteRead.Read))
            {
                return context.<#= tableName #>.SingleOrDefault(condition);
            }
        }

        /// <summary>
        /// <#=description#>-根据条件查询是否存在
        /// <param name="condition">查询条件</param>
        /// </summary>
        /// <returns></returns>
        public bool IsExists(Expression<Func<<#= tableName #>, bool>> condition)
        {
            using (<#=Utility.Config.DBContext#> context = new <#=Utility.Config.DBContext#>(WriteRead.Read))
            {
                return context.<#= tableName #>.Any(condition);
            }
        }

		/// <summary>
        /// <#=description#>-根据查询条件获取总数
        /// <param name="condition">查询条件</param>
        /// </summary>
        /// <returns></returns>
        public int GetCountByQuery(Expression<Func<<#= tableName #>, bool>> condition)
        {
		    using (<#=Utility.Config.DBContext#> context = new <#=Utility.Config.DBContext#>(WriteRead.Read))
            {
                return context.<#= tableName #>.Where(condition).Count();
            }
		}

        /// <summary>
        /// <#=description#>-获取所有
        /// </summary>
        /// <returns></returns>
        public List<<#= tableName #>> GetAll()
        {
            List<<#= tableName #>> <#= StringHelper.TableNameToLower(tableName) #>s = new List<<#= tableName #>>();
            using (<#=Utility.Config.DBContext#> context = new <#=Utility.Config.DBContext#>(WriteRead.Read))
            {
                <#= StringHelper.TableNameToLower(tableName) #>s = context.<#= tableName #>.ToList();
            }
            return <#= StringHelper.TableNameToLower(tableName) #>s;
        }

		/// <summary>
        /// <#=description#>-分页查询
        /// </summary>
        /// <param name="startRowIndex">索引开始</param>
        /// <param name="maximumRows">每页信息条数</param>
        /// <param name="condition">查询条件</param>
        /// <param name="totalRecords">总计录数</param>
		/// <param name="orderBy">排序条件</param>
        /// <param name="isDesc">是否倒序</param>
        /// <returns></returns>
		public List<<#= tableName #>> GetPagedList(int startRowIndex, int maximumRows, Expression<Func<<#= tableName #>,bool>> condition, Expression<Func<<#= tableName #>, object>> orderBy, bool isDesc, out int totalRecords)
        {
            List<<#= tableName #>> <#= StringHelper.TableNameToLower(tableName) #>s = new List<<#= tableName #>>();
            using (<#=Utility.Config.DBContext#> context = new <#=Utility.Config.DBContext#>(WriteRead.Read))
            {
				var _<#= StringHelper.TableNameToLower(tableName) #>s = context.<#= tableName #>.Where<<#= tableName #>>(condition);
                if (orderBy != null)
                {
                    _<#= StringHelper.TableNameToLower(tableName) #>s = _<#= StringHelper.TableNameToLower(tableName) #>s.OrderBy(EFHelper.GetPropertyName<<#= tableName #>>(orderBy), isDesc);
                }
				else
                {
                    _<#= StringHelper.TableNameToLower(tableName) #>s = _<#= StringHelper.TableNameToLower(tableName) #>s.OrderBy(o => o.<#= keyName #>);
                }
                <#= StringHelper.TableNameToLower(tableName) #>s = _<#= StringHelper.TableNameToLower(tableName) #>s.Skip(startRowIndex).Take(maximumRows).ToList();
                totalRecords = context.<#= tableName #>.Where<<#= tableName #>>(condition).Count();
            }
            return <#= StringHelper.TableNameToLower(tableName) #>s;
        }

		/// <summary>
        /// <#=description#>-根据条件查询
        /// </summary>
        /// <param name="condition">条件</param>
        /// <param name="orderBy">排序条件</param>
        /// <param name="isDesc">是否倒序</param>
        /// <returns></returns>
        public List<<#= tableName #>> GetListByQuery(Expression<Func<<#= tableName #>, bool>> condition, Expression<Func<<#= tableName #>, object>> orderBy, bool isDesc)
        {
            List<<#= tableName #>> <#= StringHelper.TableNameToLower(tableName) #>s = new List<<#= tableName #>>();
            using (<#=Utility.Config.DBContext#> context = new <#=Utility.Config.DBContext#>(WriteRead.Read))
            {
                var _<#= StringHelper.TableNameToLower(tableName) #>s = context.<#= tableName #>.Where<<#= tableName #>>(condition);
                if (orderBy != null)
                {
                    _<#= StringHelper.TableNameToLower(tableName) #>s = _<#= StringHelper.TableNameToLower(tableName) #>s.OrderBy(EFHelper.GetPropertyName<<#= tableName #>>(orderBy), isDesc);
                }
                <#= StringHelper.TableNameToLower(tableName) #>s = _<#= StringHelper.TableNameToLower(tableName) #>s.ToList();
            }
            return <#= StringHelper.TableNameToLower(tableName) #>s;
        }
    }
}
