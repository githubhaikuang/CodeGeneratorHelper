<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGenerator.Utility" #>
/*
 * -------------------------------------------------------------------------------
 * 版权信息：	奥鹏教育（open.com.cn）	版权所有	<#= DateTime.Now.Year #>
 * 功能描述：	代码处成器生成
 * 
 * 创建人：　	代码生成
 * 创建日期：	<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") #>
 * 创建说明：	
 * 
 * 修改人：　	
 * 修改日期：	
 * 修改说明：	
 *    
 * -------------------------------------------------------------------------------
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using <#= Config.BusinessEntitiesClass #>;
using <#= Config.DataAccessClass #>;
<#
	if(Utility.Config.IBusinessLogicEnable)
	{
#>
using <#= Config.IBusinessLogicClass #>;
<#
	}
#>
<#
	if(Utility.Config.IDataAccessEnable)
	{
#>
using <#= Config.IDataAccessClass #>;
<#
	}
#>

namespace <#= Config.BusinessLogicClass #>
{
    public partial class <#= tableName #><#= Config.BusinessLogicSuffix #><#= Utility.Config.IBusinessLogicEnable?" : I"+tableName+Config.BusinessLogicSuffix:"" #>
    {
		<#
		if(Utility.Config.IBusinessLogicEnable)
		{
			if(Utility.Config.IoCEnable)
			{
		#>
private I<#= tableName #>DAL <#= StringHelper.TableNameToLower(tableName) #>Dal;
		public <#= tableName #><#= Config.BusinessLogicSuffix #>(I<#= tableName #>DAL _<#= StringHelper.TableNameToLower(tableName) #>Dal)
		{
			<#= StringHelper.TableNameToLower(tableName) #>Dal = _<#= StringHelper.TableNameToLower(tableName) #>Dal;
		}
			<#
			}
			else
			{
			#>
			private I<#= tableName #>DAL <#= StringHelper.TableNameToLower(tableName) #>Dal = new <#= tableName #>DAL();
			<#
			}
			#>
		<#
		}
		else
		{
		#>
        private <#= tableName #>DAL <#= StringHelper.TableNameToLower(tableName) #>Dal = new <#= tableName #>DAL();
		<#
		}
		#>

        /// <summary>
        /// <#=description#>-增加方法
        /// </summary>
        public void Add(<#= tableName #> <#= StringHelper.TableNameToLower(tableName) #>)
        {
            <#= StringHelper.TableNameToLower(tableName) #>Dal.Add(<#= StringHelper.TableNameToLower(tableName) #>);
        }

        /// <summary>
        /// <#=description#>-删除方法
        /// </summary>
        public void Remove(<#= StringHelper.GetKeyToCondition(fieldList) #>)
        {
            <#= StringHelper.TableNameToLower(tableName) #>Dal.Remove(<#= StringHelper.GetKeyToFindConditon(fieldList) #>);
        }

        /// <summary>
        /// <#=description#>-删除方法
        /// </summary>
        public void Remove(Expression<Func<<#= tableName #>, bool>> condition)
        {
            <#= StringHelper.TableNameToLower(tableName) #>Dal.Remove(condition);
        }

        /// <summary>
        /// <#=description#>-修改方法
        /// </summary>
        public void Save(<#= tableName #> <#= StringHelper.TableNameToLower(tableName) #>)
        {
            <#= StringHelper.TableNameToLower(tableName) #>Dal.Save(<#= StringHelper.TableNameToLower(tableName) #>);
        }

        /// <summary>
        /// <#=description#>-根据主键获取实体信息
        /// </summary>
        /// <returns></returns>
		public <#= tableName #> GetById(<#= StringHelper.GetKeyToCondition(fieldList) #>)
        {
            return <#= StringHelper.TableNameToLower(tableName) #>Dal.GetById(<#= StringHelper.GetKeyToFindConditon(fieldList) #>);
        }

		        /// <summary>
        /// <#=description#>-根据查询条件获取实体信息
        /// <param name="condition">查询条件</param>
        /// </summary>
        /// <returns></returns>
        public <#= tableName #> GetItemByQuery(Expression<Func<<#= tableName #>, bool>> condition)
        {
			return <#= StringHelper.TableNameToLower(tableName) #>Dal.GetItemByQuery(condition);
		}

        /// <summary>
        /// <#=description#>-根据条件查询是否存在
        /// <param name="condition">查询条件</param>
        /// </summary>
        /// <returns></returns>
        public bool IsExists(Expression<Func<<#= tableName #>, bool>> condition)
        {
            return <#= StringHelper.TableNameToLower(tableName) #>Dal.IsExists(condition);
        }

		/// <summary>
        /// <#=description#>-根据查询条件获取总数
        /// <param name="condition">查询条件</param>
        /// </summary>
        /// <returns></returns>
        public int GetCountByQuery(Expression<Func<<#= tableName #>, bool>> condition)
        {
			return <#= StringHelper.TableNameToLower(tableName) #>Dal.GetCountByQuery(condition);
		}

        /// <summary>
        /// <#=description#>-获取所有
        /// </summary>
        /// <returns></returns>
        public List<<#= tableName #>> GetAll()
        {
            return <#= StringHelper.TableNameToLower(tableName) #>Dal.GetAll();
        }

				/// <summary>
        /// <#=description#>-分页查询
        /// </summary>
        /// <param name="startRowIndex">索引开始</param>
        /// <param name="maximumRows">每页信息条数</param>
        /// <param name="condition">查询条件</param>
        /// <param name="totalRecords">总计录数</param>
		/// <param name="orderBy">排序条件</param>
        /// <param name="isDesc">是否倒序</param>
        /// <returns></returns>
		public List<<#= tableName #>> GetPagedList(int startRowIndex, int maximumRows, Expression<Func<<#= tableName #>,bool>> condition, Expression<Func<<#= tableName #>, object>> orderBy, bool isDesc, out int totalRecords)
        {
			return <#= StringHelper.TableNameToLower(tableName) #>Dal.GetPagedList(startRowIndex, maximumRows,condition, orderBy, isDesc, out totalRecords);
		}

				/// <summary>
        /// <#=description#>-根据条件查询
        /// </summary>
        /// <param name="condition">条件</param>
        /// <param name="orderBy">排序条件</param>
        /// <param name="isDesc">是否倒序</param>
        /// <returns></returns>
        public List<<#= tableName #>> GetListByQuery(Expression<Func<<#= tableName #>, bool>> condition, Expression<Func<<#= tableName #>, object>> orderBy, bool isDesc)
        {
			return <#= StringHelper.TableNameToLower(tableName) #>Dal.GetListByQuery(condition, orderBy, isDesc);
		}

    }
}
