// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 12.0.0.0
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenerator.Template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using CodeGenerator.Utility;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class LogicTemplate : LogicTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("/*\r\n * --------------------------------------------------------------------------" +
                    "-----\r\n * 版权信息：\t奥鹏教育（open.com.cn）\t版权所有\t");
            
            #line 9 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.Year));
            
            #line default
            #line hidden
            this.Write("\r\n * 功能描述：\t代码处成器生成\r\n * \r\n * 创建人：　\t代码生成\r\n * 创建日期：\t");
            
            #line 13 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")));
            
            #line default
            #line hidden
            this.Write(@"
 * 创建说明：	
 * 
 * 修改人：　	
 * 修改日期：	
 * 修改说明：	
 *    
 * -------------------------------------------------------------------------------
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using ");
            
            #line 27 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Config.BusinessEntitiesClass));
            
            #line default
            #line hidden
            this.Write(";\r\nusing ");
            
            #line 28 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Config.DataAccessClass));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 29 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"

	if(Utility.Config.IBusinessLogicEnable)
	{

            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 33 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Config.IBusinessLogicClass));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 34 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"

	}

            
            #line default
            #line hidden
            
            #line 37 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"

	if(Utility.Config.IDataAccessEnable)
	{

            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 41 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Config.IDataAccessClass));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 42 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"

	}

            
            #line default
            #line hidden
            this.Write("\r\nnamespace ");
            
            #line 46 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Config.BusinessLogicClass));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public partial class ");
            
            #line 48 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            
            #line 48 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Config.BusinessLogicSuffix));
            
            #line default
            #line hidden
            
            #line 48 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Utility.Config.IBusinessLogicEnable?" : I"+tableName+Config.BusinessLogicSuffix:""));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n\t\t");
            
            #line 50 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"

		if(Utility.Config.IBusinessLogicEnable)
		{
			if(Utility.Config.IoCEnable)
			{
		
            
            #line default
            #line hidden
            this.Write("private I");
            
            #line 56 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("DAL ");
            
            #line 56 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal;\r\n\t\tpublic ");
            
            #line 57 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            
            #line 57 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Config.BusinessLogicSuffix));
            
            #line default
            #line hidden
            this.Write("(I");
            
            #line 57 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("DAL _");
            
            #line 57 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal)\r\n\t\t{\r\n\t\t\t");
            
            #line 59 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal = _");
            
            #line 59 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal;\r\n\t\t}\r\n\t\t\t");
            
            #line 61 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"

			}
			else
			{
			
            
            #line default
            #line hidden
            this.Write("\t\t\tprivate I");
            
            #line 66 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("DAL ");
            
            #line 66 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal = new ");
            
            #line 66 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("DAL();\r\n\t\t\t");
            
            #line 67 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"

			}
			
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 70 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"

		}
		else
		{
		
            
            #line default
            #line hidden
            this.Write("        private ");
            
            #line 75 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("DAL ");
            
            #line 75 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal = new ");
            
            #line 75 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("DAL();\r\n\t\t");
            
            #line 76 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"

		}
		
            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// ");
            
            #line 81 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description));
            
            #line default
            #line hidden
            this.Write("-增加方法\r\n        /// </summary>\r\n        public void Add(");
            
            #line 83 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 83 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            ");
            
            #line 85 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal.Add(");
            
            #line 85 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write(");\r\n        }\r\n\r\n        /// <summary>\r\n        /// ");
            
            #line 89 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description));
            
            #line default
            #line hidden
            this.Write("-删除方法\r\n        /// </summary>\r\n        public void Remove(");
            
            #line 91 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.GetKeyToCondition(fieldList)));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            ");
            
            #line 93 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal.Remove(");
            
            #line 93 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.GetKeyToFindConditon(fieldList)));
            
            #line default
            #line hidden
            this.Write(");\r\n        }\r\n\r\n        /// <summary>\r\n        /// ");
            
            #line 97 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description));
            
            #line default
            #line hidden
            this.Write("-删除方法\r\n        /// </summary>\r\n        public void Remove(Expression<Func<");
            
            #line 99 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(", bool>> condition)\r\n        {\r\n            ");
            
            #line 101 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal.Remove(condition);\r\n        }\r\n\r\n        /// <summary>\r\n        /// ");
            
            #line 105 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description));
            
            #line default
            #line hidden
            this.Write("-修改方法\r\n        /// </summary>\r\n        public void Save(");
            
            #line 107 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 107 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            ");
            
            #line 109 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal.Save(");
            
            #line 109 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write(");\r\n        }\r\n\r\n        /// <summary>\r\n        /// ");
            
            #line 113 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description));
            
            #line default
            #line hidden
            this.Write("-根据主键获取实体信息\r\n        /// </summary>\r\n        /// <returns></returns>\r\n\t\tpublic ");
            
            #line 116 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" GetById(");
            
            #line 116 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.GetKeyToCondition(fieldList)));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            return ");
            
            #line 118 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal.GetById(");
            
            #line 118 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.GetKeyToFindConditon(fieldList)));
            
            #line default
            #line hidden
            this.Write(");\r\n        }\r\n\r\n\t\t        /// <summary>\r\n        /// ");
            
            #line 122 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description));
            
            #line default
            #line hidden
            this.Write("-根据查询条件获取实体信息\r\n        /// <param name=\"condition\">查询条件</param>\r\n        /// </su" +
                    "mmary>\r\n        /// <returns></returns>\r\n        public ");
            
            #line 126 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" GetItemByQuery(Expression<Func<");
            
            #line 126 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(", bool>> condition)\r\n        {\r\n\t\t\treturn ");
            
            #line 128 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal.GetItemByQuery(condition);\r\n\t\t}\r\n\r\n        /// <summary>\r\n        /// ");
            
            #line 132 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description));
            
            #line default
            #line hidden
            this.Write("-根据条件查询是否存在\r\n        /// <param name=\"condition\">查询条件</param>\r\n        /// </summ" +
                    "ary>\r\n        /// <returns></returns>\r\n        public bool IsExists(Expression<F" +
                    "unc<");
            
            #line 136 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(", bool>> condition)\r\n        {\r\n            return ");
            
            #line 138 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal.IsExists(condition);\r\n        }\r\n\r\n\t\t/// <summary>\r\n        /// ");
            
            #line 142 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description));
            
            #line default
            #line hidden
            this.Write("-根据查询条件获取总数\r\n        /// <param name=\"condition\">查询条件</param>\r\n        /// </summ" +
                    "ary>\r\n        /// <returns></returns>\r\n        public int GetCountByQuery(Expres" +
                    "sion<Func<");
            
            #line 146 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(", bool>> condition)\r\n        {\r\n\t\t\treturn ");
            
            #line 148 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal.GetCountByQuery(condition);\r\n\t\t}\r\n\r\n        /// <summary>\r\n        /// ");
            
            #line 152 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description));
            
            #line default
            #line hidden
            this.Write("-获取所有\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        public Li" +
                    "st<");
            
            #line 155 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("> GetAll()\r\n        {\r\n            return ");
            
            #line 157 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal.GetAll();\r\n        }\r\n\r\n\t\t\t\t/// <summary>\r\n        /// ");
            
            #line 161 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description));
            
            #line default
            #line hidden
            this.Write(@"-分页查询
        /// </summary>
        /// <param name=""startRowIndex"">索引开始</param>
        /// <param name=""maximumRows"">每页信息条数</param>
        /// <param name=""condition"">查询条件</param>
        /// <param name=""totalRecords"">总计录数</param>
		/// <param name=""orderBy"">排序条件</param>
        /// <param name=""isDesc"">是否倒序</param>
        /// <returns></returns>
		public List<");
            
            #line 170 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("> GetPagedList(int startRowIndex, int maximumRows, Expression<Func<");
            
            #line 170 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(",bool>> condition, Expression<Func<");
            
            #line 170 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(", object>> orderBy, bool isDesc, out int totalRecords)\r\n        {\r\n\t\t\treturn ");
            
            #line 172 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal.GetPagedList(startRowIndex, maximumRows,condition, orderBy, isDesc, out total" +
                    "Records);\r\n\t\t}\r\n\r\n\t\t\t\t/// <summary>\r\n        /// ");
            
            #line 176 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description));
            
            #line default
            #line hidden
            this.Write("-根据条件查询\r\n        /// </summary>\r\n        /// <param name=\"condition\">条件</param>\r\n" +
                    "        /// <param name=\"orderBy\">排序条件</param>\r\n        /// <param name=\"isDesc\"" +
                    ">是否倒序</param>\r\n        /// <returns></returns>\r\n        public List<");
            
            #line 182 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("> GetListByQuery(Expression<Func<");
            
            #line 182 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(", bool>> condition, Expression<Func<");
            
            #line 182 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(", object>> orderBy, bool isDesc)\r\n        {\r\n\t\t\treturn ");
            
            #line 184 "H:\Users\tianwei\Desktop\V2.0\CodeGenerator\Template\LogicTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.TableNameToLower(tableName)));
            
            #line default
            #line hidden
            this.Write("Dal.GetListByQuery(condition, orderBy, isDesc);\r\n\t\t}\r\n\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class LogicTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
